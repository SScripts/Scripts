package Scripts;


import org.powerbot.core.event.listeners.PaintListener;
import org.powerbot.core.script.ActiveScript;
import org.powerbot.game.api.Manifest;
import org.powerbot.game.api.methods.Game;
import org.powerbot.game.api.methods.Tabs;
import org.powerbot.game.api.methods.Walking;
import org.powerbot.game.api.methods.input.Mouse;
import org.powerbot.game.api.methods.interactive.Players;
import org.powerbot.game.api.methods.node.SceneEntities;
import org.powerbot.game.api.methods.tab.Inventory;
import org.powerbot.game.api.methods.widget.Bank;
import org.powerbot.game.api.methods.widget.Camera;
import org.powerbot.game.api.util.Random;
import org.powerbot.game.api.wrappers.Area;
import org.powerbot.game.api.wrappers.Tile;
import org.powerbot.game.api.wrappers.node.SceneObject;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.Rectangle;

import javax.imageio.ImageIO;
import java.awt.*;
import java.io.IOException;
import java.net.URL;
import java.util.LinkedList;



@Manifest(authors = {"Arka82, SScripts"}, name = "ClayMiner", description = "Mines clay and banks it" )
public class ClayMiner extends ActiveScript implements PaintListener, MouseListener {



    org.powerbot.game.api.util.Timer runTime = new org.powerbot.game.api.util.Timer(0);
    Font font1 = new Font("Verdana", 0, 16); //20 being the font size
    Font font2 = new Font("Verdana", 0, 12);

    int [] rocks = {15503,15505};

    int clay = 434;
    public final Tile[] path = {
            new Tile(3184, 3379, 0), new Tile(3179, 3382, 0),
            new Tile(3176, 3386, 0), new Tile(3173, 3391, 0),
            new Tile(3171, 3396, 0), new Tile(3170, 3403, 0),
            new Tile(3169, 3408, 0), new Tile(3169, 3413, 0),
            new Tile(3169, 3419, 0), new Tile(3171, 3425, 0),
            new Tile(3175, 3428, 0), new Tile(3181, 3428, 0),
            new Tile(3185, 3429, 0), new Tile(3185, 3434, 0)
    };
    public final Area areatwo = new Area(new Tile[] {
            new Tile(3170, 3384, 0), new Tile(3171, 3362, 0),
            new Tile(3188, 3361, 0), new Tile(3190, 3380, 0)
    });
    public final Area area = new Area(new Tile[] {
            new Tile(3178, 3448, 0), new Tile(3178, 3432, 0),
            new Tile(3194, 3431, 0), new Tile(3194, 3447, 0)
    });
    public final Tile[] pathtwo = {
            new Tile(3184, 3433, 0), new Tile(3182, 3428, 0),
            new Tile(3175, 3428, 0), new Tile(3171, 3426, 0),
            new Tile(3170, 3420, 0), new Tile(3170, 3414, 0),
            new Tile(3170, 3408, 0), new Tile(3169, 3402, 0),
            new Tile(3171, 3396, 0), new Tile(3174, 3391, 0),
            new Tile(3176, 3385, 0), new Tile(3179, 3380, 0),
            new Tile(3184, 3379, 0), new Tile(3185, 3375, 0)
    };


    private String Satus;
    int exp = 0;
    int Gold = 0;
    int rocksmined = 0;

    public void onStart() {
        Mouse.setSpeed(Mouse.Speed.NORMAL);
    }


    @Override
    public int loop() {
        mineRocks();
        Banking();
        Walkingback();
        OpenInv();
        antiban();
        return 250;
    }

    void mineRocks () {
        SceneObject rock = SceneEntities.getNearest(rocks);

        if(rock != null && !Inventory.isFull()){

            if(rock.isOnScreen()){
                if(Players.getLocal().isIdle()) {
                    rock.interact("Mine");
                    Satus = "Mining";
                    sleep(2000, 2200);



                }

            } else  {
                Camera.turnTo(rock);
                Satus = "Looking for the rock";
            }
        } else  { if (Inventory.isFull()) {

            Satus = "Walking to Bank";

            Walking.newTilePath(path).traverse();


        }
        }
    }
    public void Banking() {

        if (Inventory.isFull() && area.contains(Players.getLocal())) {

            Satus = "Opening Bank";
            Bank.open();
            if (Bank.isOpen()) {
                Satus = "Deposit";
                sleep(100,150);
                Bank.depositInventory();
                Satus = "Closing Bank";
                sleep(100,150);

                rocksmined += 28;
                Gold += 5152;
                exp += 140;
                Bank.close();
                Satus = "Chilling";
                sleep(2000,3500);
            }

        }
    }
    public void Walkingback() {
        if (!Inventory.contains(clay) && !Bank.isOpen() && !areatwo.contains(Players.getLocal())) {

            Satus = "Walking back to Mine";

            Walking.newTilePath(pathtwo).traverse();

            if (Walking.getEnergy() >= 10) {
                if (!(Walking.isRunEnabled())) {
                    Walking.setRun(true);
                }
            }
        }
    }



    public void OpenInv() {

        if (!Tabs.INVENTORY.isOpen()) {
            sleep(3000,4000);
            Tabs.INVENTORY.open();

        }
    }

    public void antiban() {
        if (Random.nextInt(1, 100) >= 99) {
            int num = Random.nextInt(1, 200);
            int degree = Random.nextInt(1, 360);
            int pitch = Random.nextInt(1, 360);
            if (num <= 25) {
                Satus = "Antiban";
                Camera.setNorth(); //Turns North
            } else if (num <= 50) {
                Satus = "Antiban";
                Camera.setAngle(degree); //Sets the Camera Angle
            } else if (num <= 75) {
                Satus = "Antiban";
                Camera.setPitch(pitch);//Sets the Camera Pitch
            } else if (num <= 100){
                Satus = "Antiban";
                Tabs.STATS.open(false); //Opens the Stats Tab
            } else if (num <= 125) {
                Satus = "Antiban";
                Tabs.EQUIPMENT.open(false); //Opens the Equipment Tab
            } else if (num <= 150) {
                Satus = "Antiban";
                Tabs.FRIENDS.open(false); //Opens the Friends Tab
            } else {
                Satus = "Antiban";
                Camera.setAngle(degree); //Sets the Camera Angle
                Camera.setPitch(pitch); //Sets the Camera Pitch
            }
        }
    }

    private final LinkedList<MousePathPoint> mousePath = new LinkedList<MousePathPoint>();

    @SuppressWarnings("serial")
    private class MousePathPoint extends Point { // All credits to Enfilade

        private long finishTime;
        private double lastingTime;

        public MousePathPoint(int x, int y, int lastingTime) {
            super(x, y);
            this.lastingTime = lastingTime;
            finishTime = System.currentTimeMillis() + lastingTime;
        }

        public boolean isUp() {
            return System.currentTimeMillis() > finishTime;
        }
    }

    private Image getImage(String url) {
        try {
            return ImageIO.read(new URL(url));
        } catch(IOException e) {
            return null;
        }
    }

    private final Image img1 = getImage("http://i.imgur.com/9UiPNE9.png");
    boolean hide = false;
    Point p;
    Rectangle close = new Rectangle(500, 375, 25, 25);
    Rectangle open = new Rectangle(427, 405, 90, 90);
    Image button = getImage("http://i.imgur.com/H7UBt9i.png");
    Image cursorr = getImage("http://i.imgur.com/9gVvSXA.png");


    @Override
    public void mouseClicked(MouseEvent e) {
        p = e.getPoint();
        if (close.contains(p) && !hide) {
            hide = true;
        } else if (open.contains(p) && hide) {
            hide = false;
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    //Paint
    @Override
    public void onRepaint(Graphics g) {

        if (Game.getClientState()  == 11) {
            if (!hide) {

                g.drawImage(img1, 1, 380, null);
                g.setColor(Color.BLACK);
                g.setFont(font1);
                g.drawString("" + runTime.toElapsedString(), 150, 414);
                g.drawString("" + rocksmined, 135, 468);

                g.drawString("" + Gold, 145, 498);
                g.drawString("" + exp, 137, 442);

                g.setColor(Color.BLACK);
                g.setFont(font2);
                g.drawString("" + Satus, 325, 496);







            }

            if (hide) {
                g.drawImage(button, 427, 405, null);
            }
        }
        g.setColor(Color.BLUE);
        g.drawLine(Mouse.getX() - 0, Mouse.getY() - 0, Mouse.getX() + 0, Mouse.getY() + 900);
        g.drawLine(Mouse.getX() - 0, Mouse.getY() + 0, Mouse.getX() + 900, Mouse.getY() - 0);
        g.drawLine(Mouse.getX() - 900, Mouse.getY() + 0, Mouse.getX() + 0, Mouse.getY() - 0);
        g.drawLine(Mouse.getX() - 0, Mouse.getY() + 0, Mouse.getX() + 0, Mouse.getY() - 900);
        g.setColor( Mouse.isPressed() ? Color.PINK : Color.BLACK );

    }
}
